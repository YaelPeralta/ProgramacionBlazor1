@page "/ticketes/nueva"
@page "/ticketes/editar{id:int}"
@inject IRepositorioTicketes RepositorioTicket
@inject IRepositorioProducto RepositorioProducto
@inject IRepositorioSucursal RepositorioSucursal
@inject NavigationManager _navigator

<EditForm Model="ticket" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="fecha">Fecha</label>
        <InputDate id="fecha" class="form-control" @bind-Value="ticket.Fecha" />
    </div>
    <div class="form-group">
        <label for="sucursal">Sucursal</label>
        <select id="sucursal" class="form-control" @bind="ticket.SucursalId">
            @foreach (var sucursal in sucursales)
            {
                <option value="@sucursal.SucursalId">@sucursal.Nombre</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="productos">Productos</label>
        <select id="productos" class="form-control" @onchange="AddProducto">
            <option value="">Seleccione un producto</option>
            @foreach (var producto in productos)
            {
                <option value="@producto.ProductoId">@producto.Nombre - @producto.Precio</option>
            }
        </select>
    </div>
    <ul>
        @foreach (var producto in ticket.Productos)
        {
            <li>@producto.Nombre - @producto.Precio <button @onclick="() => RemoveProducto(producto)">Eliminar</button></li>
        }
    </ul>
    <div class="form-group">
        <label for="costototal">Costo Total</label>
        <input id="costototal" class="form-control" value="@ticket.CostoTotal" readonly />
    </div>

    <button type="submit" class="btn btn-primary">Guardar</button>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }
    private Ticket ticket = new Ticket();
    private List<Producto> productos = new List<Producto>();
    private List<Sucursal> sucursales = new List<Sucursal>();
    private string FormName = "ticketForm";

    protected override async Task OnInitializedAsync()
    {
        productos = await RepositorioProducto.GetAll();
        sucursales = await RepositorioSucursal.GetAll();

        if (Id > 0)
        {
            ticket = await RepositorioTicket.Get(Id.Value) ?? new Ticket();
        }
    }

    private async void Guardar()
    {
        if (Id > 0)
        {
            await RepositorioTicket.Update(Id.Value, ticket);
        }
        else
        {
            await RepositorioTicket.Add(ticket);
        }
        Cancelar();
    }

    private void AddProducto(ChangeEventArgs e)
    {
        var productoId = int.Parse(e.Value.ToString());
        var producto = productos.FirstOrDefault(p => p.ProductoId == productoId);
        if (producto != null)
        {
            ticket.Productos.Add(producto);
            CalcularCostoTotal();
        }
    }

    private void RemoveProducto(Producto producto)
    {
        ticket.Productos.Remove(producto);
        CalcularCostoTotal();
    }

    private void CalcularCostoTotal()
    {
        ticket.CostoTotal = ticket.Productos.Sum(p => p.Precio);
    }
    private void Cancelar()
    {
        _navigator.NavigateTo("/ticketes");
    }
}
