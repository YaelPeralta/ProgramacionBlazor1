@page "/ticketes/nueva"
@page "/ticketes/editar{id:int}"
@rendermode InteractiveServer
@inject IRepositorioTicketes _repositorioT;
@inject IRepositorioProducto _repositorioP;
@inject IRepositorioSucursal _repositorioS;
@inject NavigationManager _navigator;

<h3>@_mensaje Ticket</h3>

<EditForm Model="_ticket" FormName="frmTicket" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="fecha">Fecha</label>
        <InputDate id="fecha" class="form-control" @bind-Value="_ticket.Fecha" />
    </div>

    <div class="form-group">
        <label for="sucursal">Sucursal</label>
        <select id="sucursal" class="form-control" @bind="_ticket.SucursalId">
            <option value="">Seleccione una sucursal</option>
            @foreach (var sucursal in _sucursales)
            {
                <option value="@sucursal.SucursalId">@sucursal.Nombre</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="txtProductos" class="col-2 col-form-label">Productos:</label>
        <div class="col-10">
            <InputSelect @bind-Value="_productoSeleccionados" multiple >
                @foreach (Producto producto in _productos)
                {
                    <option value="@producto.ProductoId" @onclick="ActualizarPrecio">@producto.Nombre</option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="form-group">
        <label for="costototal" type="number">Costo Total</label>
        <input id="costototal" class="form-control" @bind-value="_ticket.CostoTotal" readonly />
    </div>
    <br />
    <button class="btn-primary" type="submit">Guardar</button>
    <button class="btn-danger" @onclick="Cancelar">Cancelar</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    private string _mensaje = "";
    private Ticket? _ticket = new();
    private List<Sucursal> _sucursales = new();
    private List<Producto> _productos = new();
    private int[] _productoSeleccionados = new int[] { };

    protected override async Task OnInitializedAsync()
    {
        _productos = await _repositorioP.GetAll();
        _sucursales = await _repositorioS.GetAll();
        if (Id > 0)
        {
            _ticket = await _repositorioT.Get(Id);
            if (_ticket.Productos.Count > 0)
            {
                _productoSeleccionados = _ticket.Productos.Select(i => i.ProductoId).ToArray();
            }
            _mensaje = "Modificar";
        }
        else
        {
            _mensaje = "Nuevo";
        }
    }

    private async void Guardar()
    {
        if (_productoSeleccionados.Length > 0)
        {
            List<Producto> productos = new();
            foreach (int idProducto in _productoSeleccionados)
            {
                productos.Add(_productos.First(r => r.ProductoId == idProducto));
            }
            _ticket.Productos = productos;
        }

        if (Id > 0)
        {
            await _repositorioT.Update(Id, _ticket!);
        }
        else
        {
            await _repositorioT.Add(_ticket!);
        }
        Cancelar();
    }

    private void Cancelar()
    {
        _navigator.NavigateTo("/tickets");
    }

    public async Task ActualizarPrecio()
    {
        decimal valor = 0;

        foreach (int id in _productoSeleccionados)
        {
            var producto = await _repositorioP.Get(id);
            valor += producto.Precio;
        }

        _ticket.CostoTotal = valor;
    }
}